use super::sha::*;
use super::{CipherKey, CipherTypes};

pub trait MAC {
    fn mac(&self, key: &[u8], text: &[u8], tag_len: usize) -> Vec<u8>;
}

pub struct CMAC {
    cipher: CipherTypes,
}

impl CMAC {
    pub fn new(cipher: CipherTypes) -> Self {
        Self { cipher }
    }

    fn subk(&self, cipher: &dyn super::BlockCipher) -> (Box<[u8]>, Box<[u8]>) {
        let mut rb = [0u8; 16];
        rb[15] = 0b10000111;
        let mut block = [0u8; 16];
        // self.cipher.encrypt_block(&mut block);
        cipher.encrypt_block(&mut block);
        let mut k1 = block;

        let mut carry_over = 0;
        for i in (0..k1.len()).rev() {
            let next_carry_over = k1[i] >> 7;

            k1[i] <<= 1;
            k1[i] |= carry_over;

            carry_over = next_carry_over;
        }

        if block[0] >> 7 == 1 {
            for (k, b) in k1.iter_mut().zip(rb.iter()) {
                *k ^= *b;
            }
        }

        let mut k2 = k1;

        let mut carry_over = 0;
        for i in (0..k2.len()).rev() {
            let next_carry_over = k2[i] >> 7;

            k2[i] <<= 1;
            k2[i] |= carry_over;

            carry_over = next_carry_over;
        }

        if k1[0] >> 7 == 1 {
            for (k, b) in k2.iter_mut().zip(rb.iter()) {
                *k ^= *b;
            }
        }

        (Box::new(k1), Box::new(k2))
    }
}

impl MAC for CMAC {
    /// tag len should be in bits
    fn mac(&self, key: &[u8], text: &[u8], tag_len: usize) -> Vec<u8> {
        let mut tmp_block = [0u8; 1];
        tmp_block[0] = 1 << 7;
        let cipher = self.cipher.new(CipherKey { key }).unwrap();
        let pt = if text.is_empty() { &tmp_block } else { text };

        let length = (pt.len() >> 4) + if pt.len() & 15 == 0 { 0 } else { 1 };

        let subkeys = self.subk(&*cipher);

        Vec::from(
            &pt.chunks(16)
                .enumerate()
                .fold([0u8; 16], |mut cn_1, (n, m)| {
                    let mut tmp = [0u8; 16];
                    tmp[..m.len()].clone_from_slice(&m[..]);
                    if length == n + 1 {
                        if m.len() < 16 && text.len() != 0 {
                            tmp[m.len()] = 1 << 7;
                        }
                        for (m, b) in tmp
                            .iter_mut()
                            .zip(if m.len() < 16 { &subkeys.1 } else { &subkeys.0 }.iter())
                        {
                            *m ^= *b;
                        }
                    }

                    for (m, b) in cn_1.iter_mut().zip(tmp.iter()) {
                        *m ^= *b;
                    }

                    (&cipher).encrypt_block(&mut cn_1);

                    cn_1
                })[..(tag_len >> 3)],
        )
    }
}

pub struct HMAC {
    hash: HashAlg,
}

impl std::default::Default for HMAC {
    fn default() -> Self {
        Self {
            hash: HashAlg::Sha512,
        }
    }
}

impl HMAC {
    pub fn new(hash: HashAlg) -> HMAC {
        HMAC { hash }
    }
}

impl MAC for HMAC {
    // Tag len is in bits
    fn mac(&self, key: &[u8], text: &[u8], tag_len: usize) -> Vec<u8> {
        let mut k_0 = key.to_owned();
        debug_assert!(
            tag_len <= self.hash.size(),
            "tag length exceeds hash length"
        );

        if k_0.len() > self.hash.block_size() >> 3 {
            let res: Box<[u8]> = self.hash.hash(k_0);
            let mut out = Vec::new();
            for i in (*res).iter() {
                out.push(*i);
            }
            k_0 = out;
        }

        if k_0.len() < self.hash.block_size() >> 3 {
            k_0.append(
                &mut std::iter::repeat(0)
                    .take((self.hash.block_size() >> 3) - k_0.len())
                    .collect(),
            );
        }

        let mut ipad = std::iter::repeat(0x36);
        let mut opad = std::iter::repeat(0x5c);

        let mut kxoripad = Vec::new();

        for b in &k_0 {
            kxoripad.push(b ^ ipad.next().unwrap());
        }

        for b in text.iter() {
            kxoripad.push(*b);
        }

        let res = self.hash.hash(kxoripad);

        let mut kxoropad = Vec::new();

        for b in &k_0 {
            kxoropad.push(b ^ opad.next().unwrap());
        }

        kxoropad.append(&mut res.to_vec());

        let mac = self.hash.hash(kxoropad);

        mac[0..(tag_len >> 3)].to_vec()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn hmac_test_1() {
        let input = b"Sample message for keylen=blocklen".to_vec();
        let key: Vec<u8> = (0..0x80).collect();
        let hmac = HMAC::default();
        let mac = hmac.mac(&key[..], &input, 512);
        let exp = [
            0xFC, 0x25, 0xE2, 0x40, 0x65, 0x8C, 0xA7, 0x85, 0xB7, 0xA8, 0x11, 0xA8, 0xD3, 0xF7,
            0xB4, 0xCA, 0x48, 0xCF, 0xA2, 0x6A, 0x8A, 0x36, 0x6B, 0xF2, 0xCD, 0x1F, 0x83, 0x6B,
            0x05, 0xFC, 0xB0, 0x24, 0xBD, 0x36, 0x85, 0x30, 0x81, 0x81, 0x1D, 0x6C, 0xEA, 0x42,
            0x16, 0xEB, 0xAD, 0x79, 0xDA, 0x1C, 0xFC, 0xB9, 0x5E, 0xA4, 0x58, 0x6B, 0x8A, 0x0C,
            0xE3, 0x56, 0x59, 0x6A, 0x55, 0xFB, 0x13, 0x47,
        ];
        assert_eq!(mac[..], exp[..]);
    }

    #[test]
    fn hmac_test_2() {
        let input = b"Sample message for keylen<blocklen".to_vec();
        let key: Vec<u8> = (0..0x40).collect();
        let hmac = HMAC::default();
        let mac = hmac.mac(&key[..], &input, 512);
        let exp = [
            0xFD, 0x44, 0xC1, 0x8B, 0xDA, 0x0B, 0xB0, 0xA6, 0xCE, 0x0E, 0x82, 0xB0, 0x31, 0xBF,
            0x28, 0x18, 0xF6, 0x53, 0x9B, 0xD5, 0x6E, 0xC0, 0x0B, 0xDC, 0x10, 0xA8, 0xA2, 0xD7,
            0x30, 0xB3, 0x63, 0x4D, 0xE2, 0x54, 0x5D, 0x63, 0x9B, 0x0F, 0x2C, 0xF7, 0x10, 0xD0,
            0x69, 0x2C, 0x72, 0xA1, 0x89, 0x6F, 0x1F, 0x21, 0x1C, 0x2B, 0x92, 0x2D, 0x1A, 0x96,
            0xC3, 0x92, 0xE0, 0x7E, 0x7E, 0xA9, 0xFE, 0xDC,
        ];
        assert_eq!(mac[..], exp[..]);
    }

    #[test]
    fn hmac_test_3() {
        let input = b"Sample message for keylen=blocklen".to_vec();
        let key: Vec<u8> = (0..0xC8).collect();
        let hmac = HMAC::default();
        let mac = hmac.mac(&key[..], &input, 512);
        let exp = [
            0xD9, 0x3E, 0xC8, 0xD2, 0xDE, 0x1A, 0xD2, 0xA9, 0x95, 0x7C, 0xB9, 0xB8, 0x3F, 0x14,
            0xE7, 0x6A, 0xD6, 0xB5, 0xE0, 0xCC, 0xE2, 0x85, 0x07, 0x9A, 0x12, 0x7D, 0x3B, 0x14,
            0xBC, 0xCB, 0x7A, 0xA7, 0x28, 0x6D, 0x4A, 0xC0, 0xD4, 0xCE, 0x64, 0x21, 0x5F, 0x2B,
            0xC9, 0xE6, 0x87, 0x0B, 0x33, 0xD9, 0x74, 0x38, 0xBE, 0x4A, 0xAA, 0x20, 0xCD, 0xA5,
            0xC5, 0xA9, 0x12, 0xB4, 0x8B, 0x8E, 0x27, 0xF3,
        ];
        assert_eq!(mac[..], exp[..]);
    }

    #[test]
    fn hmac_test_4() {
        let input = b"Sample message for keylen<blocklen, with truncated tag".to_vec();
        let key: Vec<u8> = (0..0x31).collect();
        let hmac = HMAC::default();
        let mac = hmac.mac(&key[..], &input, 256);
        let exp = [
            0x00, 0xF3, 0xE9, 0xA7, 0x7B, 0xB0, 0xF0, 0x6D, 0xE1, 0x5F, 0x16, 0x06, 0x03, 0xE4,
            0x2B, 0x50, 0x28, 0x75, 0x88, 0x08, 0x59, 0x66, 0x64, 0xC0, 0x3E, 0x1A, 0xB8, 0xFB,
            0x2B, 0x07, 0x67, 0x78,
        ];
        assert_eq!(mac[..], exp[..]);
    }

    #[test]
    fn cmac_test_1aes128() {
        let key = [
            0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF,
            0x4F, 0x3C,
        ];
        let expected = [
            0xBB, 0x1D, 0x69, 0x29, 0xE9, 0x59, 0x37, 0x28, 0x7F, 0xA3, 0x7D, 0x12, 0x9B, 0x75,
            0x67, 0x46,
        ];
        let message = [];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_2aes128() {
        let key = [
            0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF,
            0x4F, 0x3C,
        ];
        let expected = [
            0x07, 0x0A, 0x16, 0xB4, 0x6B, 0x4D, 0x41, 0x44, 0xF7, 0x9B, 0xDD, 0x9D, 0xD0, 0x4A,
            0x28, 0x7C,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_3aes128() {
        let key = [
            0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF,
            0x4F, 0x3C,
        ];
        let expected = [
            0x7D, 0x85, 0x44, 0x9E, 0xA6, 0xEA, 0x19, 0xC8, 0x23, 0xA7, 0xBF, 0x78, 0x83, 0x7D,
            0xFA, 0xDE,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_4aes128() {
        let key = [
            0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF,
            0x4F, 0x3C,
        ];
        let expected = [
            0x51, 0xF0, 0xBE, 0xBF, 0x7E, 0x3B, 0x9D, 0x92, 0xFC, 0x49, 0x74, 0x17, 0x79, 0x36,
            0x3C, 0xFE,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC,
            0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB,
            0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
            0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_1aes192() {
        let key = [
            0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90,
            0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B,
        ];
        let expected = [
            0xD1, 0x7D, 0xDF, 0x46, 0xAD, 0xAA, 0xCD, 0xE5, 0x31, 0xCA, 0xC4, 0x83, 0xDE, 0x7A,
            0x93, 0x67,
        ];
        let message = [];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_2aes192() {
        let key = [
            0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90,
            0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B,
        ];
        let expected = [
            0x9E, 0x99, 0xA7, 0xBF, 0x31, 0xE7, 0x10, 0x90, 0x06, 0x62, 0xF6, 0x5E, 0x61, 0x7C,
            0x51, 0x84,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_3aes192() {
        let key = [
            0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90,
            0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B,
        ];
        let expected = [
            0x3D, 0x75, 0xC1, 0x94, 0xED, 0x96, 0x07, 0x04, 0x44, 0xA9, 0xFA, 0x7E, 0xC7, 0x40,
            0xEC, 0xF8,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_4aes192() {
        let key = [
            0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90,
            0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B,
        ];
        let expected = [
            0xA1, 0xD5, 0xDF, 0x0E, 0xED, 0x79, 0x0F, 0x79, 0x4D, 0x77, 0x58, 0x96, 0x59, 0xF3,
            0x9A, 0x11,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC,
            0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB,
            0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
            0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_1aes256() {
        let key = [
            0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D,
            0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3,
            0x09, 0x14, 0xDF, 0xF4,
        ];
        let expected = [
            0x02, 0x89, 0x62, 0xF6, 0x1B, 0x7B, 0xF8, 0x9E, 0xFC, 0x6B, 0x55, 0x1F, 0x46, 0x67,
            0xD9, 0x83,
        ];
        let message = [];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_2aes256() {
        let key = [
            0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D,
            0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3,
            0x09, 0x14, 0xDF, 0xF4,
        ];
        let expected = [
            0x28, 0xA7, 0x02, 0x3F, 0x45, 0x2E, 0x8F, 0x82, 0xBD, 0x4B, 0xF2, 0x8D, 0x8C, 0x37,
            0xC3, 0x5C,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_3aes256() {
        let key = [
            0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D,
            0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3,
            0x09, 0x14, 0xDF, 0xF4,
        ];
        let expected = [
            0x15, 0x67, 0x27, 0xDC, 0x08, 0x78, 0x94, 0x4A, 0x02, 0x3C, 0x1F, 0xE0, 0x3B, 0xAD,
            0x6D, 0x93,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }

    #[test]
    fn cmac_test_4aes256() {
        let key = [
            0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D,
            0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3,
            0x09, 0x14, 0xDF, 0xF4,
        ];
        let expected = [
            0xE1, 0x99, 0x21, 0x90, 0x54, 0x9F, 0x6E, 0xD5, 0x69, 0x6A, 0x2C, 0x05, 0x6C, 0x31,
            0x54, 0x10,
        ];
        let message = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC,
            0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB,
            0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
            0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10,
        ];
        let cmac = CMAC::new(CipherTypes::AES);
        let mac = cmac.mac(&key[..], &message[..], 128);
        assert_eq!(mac, expected);
    }
}
